{"version":3,"sources":["components/DraftTextEditor.js","components/DialogAnalyzer.js","components/MyEditor.js","App.js","index.js"],"names":["DraftTextEditor","props","undefined","parent","setChild","state","editorState","EditorState","createWithText","defaultDialog","focus","refs","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","this","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","onToggle","onClick","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","ref","spellCheck","React","Component","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","preventDefault","style","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","DialogAnalyzer","EXIT","DUNFORGET","REMEMBER","ADDTAG","VAR","ELSE","HASTAG","UP","DELETETAG","code","split","curLine","tags","vars","saves","found","length","charId","process","alert","operation","context","needsToExit","sign","readFromPointToDot","line","str","variable","i","amount","parseInt","pass","maxIndentationLevel","seekingForElse","tag","options","text","loadedSaveLine","saveWhat","saveWhere","num","discussedLine","indentationLevel","lch","minIndentationLevel","newOption","push","txt","opResult","executeAnOperation","option","ans","quotes","MyEditor","createEmpty","dialogEngine","previousOptions","child","editorComponentClass","editorCore","document","querySelector","movingAllowed","divider","saveThis","changeMouseStatus","event","editorContent","classList","toggle","dialogOutputConent","addEventListener","width","clientX","toString","remove","getOptions","optionButton","createElement","innerHTML","remOption","chooseOption","buttonClicked","appendChild","getText","setupDraggableBar","compile","getPlainText","App","useEffect","title","height","sampleDialog","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e7f6cf93.chunk.js","sourcesContent":["import React from 'react';\nimport { Editor, EditorState, getDefaultKeyBinding, RichUtils } from 'draft-js';\nimport './../styles/RichText.css'\n\n\nclass DraftTextEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        if (props.parent !== undefined){\n            props.parent.setChild(this);\n        }\n        this.state = { editorState: EditorState.createWithText(props.defaultDialog) };\n\n        this.focus = () => this.refs.editor.focus();\n        this.onChange = (editorState) => this.setState({ editorState });\n\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n        this.toggleBlockType = this._toggleBlockType.bind(this);\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n    }\n\n\n    _handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return true;\n        }\n        return false;\n    }\n\n    _mapKeyToEditorCommand(e) {\n        if (e.keyCode === 9 /* TAB */) {\n            const newEditorState = RichUtils.onTab(\n                e,\n                this.state.editorState,\n                4, /* maxDepth */\n            );\n            if (newEditorState !== this.state.editorState) {\n                this.onChange(newEditorState);\n            }\n            return;\n        }\n        return getDefaultKeyBinding(e);\n    }\n\n    _toggleBlockType(blockType) {\n        this.onChange(\n            RichUtils.toggleBlockType(\n                this.state.editorState,\n                blockType\n            )\n        );\n    }\n\n    _toggleInlineStyle(inlineStyle) {\n        this.onChange(\n            RichUtils.toggleInlineStyle(\n                this.state.editorState,\n                inlineStyle\n            )\n        );\n    }\n\n    render() {\n        const { editorState } = this.state;\n\n        // If the user changes block type before entering any text, we can\n        // either style the placeholder or hide it. Let's just hide it now.\n        let className = 'RichEditor-editor';\n        var contentState = editorState.getCurrentContent();\n        if (!contentState.hasText()) {\n            if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n                className += ' RichEditor-hidePlaceholder';\n            }\n        }\n\n        return (\n            <div className=\"RichEditor-root\">\n                <BlockStyleControls\n                    editorState={editorState}\n                    onToggle={this.toggleBlockType}\n                />\n                <InlineStyleControls\n                    editorState={editorState}\n                    onToggle={this.toggleInlineStyle}\n                />\n                <div className={className} onClick={this.focus}>\n                    <Editor\n                        blockStyleFn={getBlockStyle}\n                        customStyleMap={styleMap}\n                        editorState={editorState}\n                        handleKeyCommand={this.handleKeyCommand}\n                        keyBindingFn={this.mapKeyToEditorCommand}\n                        onChange={this.onChange}\n                        placeholder=\"Tell a story...\"\n                        ref=\"editor\"\n                        spellCheck={true}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n    CODE: {\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n        fontSize: 16,\n        padding: 2,\n    },\n};\n\nfunction getBlockStyle(block) {\n    switch (block.getType()) {\n        case 'blockquote':\n            return 'RichEditor-blockquote';\n        default:\n            return null;\n    }\n}\n\nclass StyleButton extends React.Component {\n    constructor() {\n        super();\n        this.onToggle = (e) => {\n            e.preventDefault();\n            this.props.onToggle(this.props.style);\n        };\n    }\n\n    render() {\n        let className = 'RichEditor-styleButton';\n        if (this.props.active) {\n            className += ' RichEditor-activeButton';\n        }\n\n        return (\n            <span className={className} onMouseDown={this.onToggle}>\n                {this.props.label}\n            </span>\n        );\n    }\n}\n\nconst BLOCK_TYPES = [\n];\n\nconst BlockStyleControls = (props) => {\n    const { editorState } = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType();\n\n    return (\n        <div className=\"RichEditor-controls\">\n            {BLOCK_TYPES.map((type) =>\n                <StyleButton\n                    key={type.label}\n                    active={type.style === blockType}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nvar INLINE_STYLES = [\n];\n\nconst InlineStyleControls = (props) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle();\n\n    return (\n        <div className=\"RichEditor-controls\">\n            {INLINE_STYLES.map((type) =>\n                <StyleButton\n                    key={type.label}\n                    active={currentStyle.has(type.style)}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\nexport default DraftTextEditor;\n","import { useCallback } from \"react\";\n\nclass DialogAnalyzer {\n    constructor(props) {\n        // OPERATIONS:\n        this.EXIT = \"exit\";\n        this.DUNFORGET = \"save\";\n        this.REMEMBER = \"load\";\n        this.ADDTAG = \"addTag\";\n        this.VAR = \"var\";\n        this.ELSE = \"else\";\n        this.HASTAG = \"hasTag\";\n        this.UP = \"up\";\n        this.DELETETAG = \"deleteTag\";\n    }\n\n    compile(code) {\n        this.code = code.split('\u0001');\n        this.curLine = 0;\n        this.tags = {};\n        this.vars = {};\n        this.saves = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]; // 10 saves\n        let found = false;\n        for (; this.curLine < this.code.length; ++this.curLine) {\n            for (let charId = 0; charId < this.code[this.curLine].length; ++charId) {\n                if (this.code[this.curLine][charId] === '(') {\n                    found = true;\n                    break;\n                }\n\n            }\n            if (found) {\n                break;\n            }\n        }\n        if (!found) {\n            //Did not found the first left bracket...\n            alert(\"You are missing the first left bracket! Code is incorrect.\")\n            return\n        }\n        this.process(this.curLine);\n    }\n\n    executeAnOperation(operation, charId, context) {\n        let needsToExit = false;\n        switch (operation) {\n            case (this.VAR): {        //Working with variables\n                let sign = this.readFromPointToDot(this.code[context.line], charId);\n                charId = sign.charId;\n                sign = sign.str;\n                let variable = \"\"\n                for (let i = 1; i < sign.length - 1; ++i) {\n                    variable += sign[i];\n                }\n                sign = this.readFromPointToDot(this.code[context.line], charId);\n                charId = sign.charId;\n                sign = sign.str;\n                let amount = this.readFromPointToDot(this.code[context.line], charId);\n                charId = amount.charId;\n                amount = parseInt(amount.str);\n                if (sign === \"=\") {\n                    this.vars[variable] = amount;\n                } else if (sign === \"+=\") {\n                    this.vars[variable] += amount;\n                } else {\n                    let pass = false;\n                    if (sign === \"==\") {\n                        pass = this.vars[variable] === amount;\n                    } else if (sign === \">=\") {\n                        pass = this.vars[variable] >= amount;\n                    } else if (sign === \"!=\") {\n                        pass = this.vars[variable] !== amount;\n                    } else if (sign === \"<=\") {\n                        pass = this.vars[variable] <= amount;\n                    } else if (sign === \"<\") {\n                        pass = this.vars[variable] < amount;\n                    } else if (sign === \">\") {\n                        pass = this.vars[variable] > amount;\n                    }\n                    if (pass) {\n                        context.maxIndentationLevel++;\n                    } else {\n                        context.seekingForElse = -2;\n                    }\n                }\n            }\n                break;\n            case this.ADDTAG: {\n                let tag = this.readFromPointToDot(this.code[context.line], charId);\n                charId = tag.charId;\n                tag = tag.str;\n                this.tags[tag] = true;\n            }\n                break;\n            case this.DELETETAG: {\n                let tag = this.readFromPointToDot(this.code[context.line], charId);\n                charId = tag.charId;\n                tag = tag.str;\n                this.tags[tag] = false;\n            }\n                break;\n            case this.HASTAG: {\n                let tag = this.readFromPointToDot(this.code[context.line], charId);\n                charId = tag.charId;\n                tag = tag.str;\n                if (!(tag in this.tags) || this.tags[tag] === false) {\n                    context.seekingForElse = -2;\n                } else {\n                    context.maxIndentationLevel++;\n                }\n            }\n                break;\n            case this.ELSE: {\n                if (context.seekingForElse > -1) {\n                    context.seekingForElse = -1;\n                    context.maxIndentationLevel++;\n                }\n            }\n                break;\n            case this.EXIT: {//Exit the dialog operation.\n                this.options = [];\n                this.text = \"--EXITED THE DIALOG--\";\n                needsToExit = true\n            }\n                break;\n            case this.REMEMBER: {  //Load some point\n                let loadedSaveLine = this.readFromPointToDot(this.code[context.line], charId).str;\n                this.process(this.saves[parseInt(loadedSaveLine)]);\n                needsToExit = true\n            }\n                break;\n            case this.DUNFORGET: { //Save some point\n                let saveWhat = this.readFromPointToDot(this.code[context.line], charId);  // 0 - str, 1 - charId\n                charId = saveWhat.charId;\n                saveWhat = parseInt(saveWhat.str);\n                let saveWhere = this.readFromPointToDot(this.code[context.line], charId);  // 0 - str, 1 - charId\n                charId = saveWhere.charId;\n                saveWhere = parseInt(saveWhere.str);\n                this.saves[saveWhere] = saveWhat + 1 + context.line;\n            }\n                break;\n            case this.UP: {\n                let num = this.readFromPointToDot(this.code[context.line], charId);\n                charId = num.charId;\n                num = parseInt(num.str)\n                let discussedLine = context.line - 1;\n                context.indentationLevel = -1;\n                while (context.indentationLevel !== num) {\n                    for (let lch = 0; lch < this.code[discussedLine].length; ++lch) {\n                        if (this.code[discussedLine][lch] === ' ' || this.code[discussedLine][lch] === '\\t' || this.code[discussedLine][lch] === '\\n') {\n                            continue;\n                        }\n                        if (this.code[discussedLine][lch] === '(') {\n                            context.indentationLevel++;\n                        } else if (this.code[discussedLine][lch] === ')') {\n                            context.indentationLevel--;\n                        } else {\n                            break;\n                        }\n                    }\n                    discussedLine--;\n                }\n                this.process(discussedLine + 1);\n                needsToExit = true;\n            }\n                break;\n        }\n        return { needsToExit: needsToExit, charId: charId }\n    }\n\n    process(line) {\n        this.text = \"\";\n        this.options = [];\n        let context = {}\n        context.line = ++line;\n        context.indentationLevel = 1\n        context.minIndentationLevel = 1\n        context.maxIndentationLevel = 1;\n        context.seekingForElse = -1;\n        while (context.indentationLevel !== 0) {\n            if (context.seekingForElse > -1) {\n                context.seekingForElse--;\n            }\n            let charId = 0;\n            while (charId < this.code[context.line].length) {\n                if (this.code[context.line][charId] === '(') { //Visibility change\n                    context.indentationLevel++;\n                } else if (this.code[context.line][charId] === ')') {   //Visibility change\n                    if (context.maxIndentationLevel !== 1 && ((context.indentationLevel < context.minIndentationLevel || context.indentationLevel > context.maxIndentationLevel)) === false) {\n                        context.maxIndentationLevel--;\n                    } else if (context.seekingForElse === -2 && (context.indentationLevel < context.minIndentationLevel || context.indentationLevel > context.maxIndentationLevel) === true) {\n                        context.seekingForElse = 2;\n                    }\n                    context.indentationLevel--;\n                } else if (context.indentationLevel < context.minIndentationLevel || context.indentationLevel > context.maxIndentationLevel) {   //Out of our visibility\n                    ++charId;\n                    continue;\n                } else if (this.code[context.line][charId] === '\\\\') {   //Option\n                    charId++;\n                    let newOption = \"\";\n                    for (let lch = charId; lch < this.code[context.line].length; ++lch) {\n                        if (this.code[context.line][lch] === '/') {\n                            break;\n                        }\n                        newOption += this.code[context.line][lch];\n                    }\n                    this.options.push([newOption, context.line + 1])\n                    break;\n                } else if (this.code[context.line][charId] === ':') {   //Some operation\n                    charId++;\n                    let operation = this.readFromPointToDot(this.code[context.line], charId);\n                    charId = operation.charId;\n                    operation = operation.str;\n                    if (operation[0] === '\"') {//That's THE text\n                        let txt = \"\";\n                        for (let i = 1; i < operation.length - 1; ++i) {\n                            txt += operation[i];\n                        }\n                        this.text = txt;\n                    }\n                    else {\n                        let opResult = this.executeAnOperation(operation, charId, context)\n                        if (opResult.needsToExit == true) {\n                            return opResult.charId;\n                        }\n                        charId = opResult.charId;\n                    }\n                    break;\n                }\n                ++charId;\n            }\n            ++context.line;\n        }\n    }\n\n    getText() {\n        return this.text;\n    }\n\n    getOptions() {  // [options] where one option is [string, lineNum]\n        return this.options;\n    }\n\n    chooseOption(option) {\n        this.curLine = option[1];\n        this.process(this.curLine);\n    }\n\n    readFromPointToDot(line, charId) {    //Returns {str:string we were looking for, charId: new char id}\n        let ans = \"\";\n        let quotes = false;\n        while (charId < line.length) {\n            if (line[charId] === '\"') {\n                quotes = !quotes;\n            }\n            if (quotes) {\n                if (line[charId] === '\\\\' && line.length - 1 !== charId && line[charId + 1] === 'n') { //New line when writing dialogs\n                    charId += 2;\n                    ans += '<br>';\n                    continue;\n                }\n            } else if (line[charId] === '.') {\n                return { str: ans, charId: charId + 1 };\n            }\n            ans += line[charId];\n            ++charId;\n        }\n        return { str: ans, charId: charId + 1 }\n    }\n\n\n}\n\nexport default DialogAnalyzer;\n","import DraftTextEditor from \"./DraftTextEditor\";\nimport React from \"react\";\nimport EditorState from \"draft-js/lib/EditorState\";\nimport DialogAnalyzer from \"./DialogAnalyzer\";\nclass MyEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultDialog = props.defaultDialog;\n        this.state = { editorState: EditorState.createEmpty() };\n        this.onChange = editorState => this.setState({ editorState });\n        this.dialogEngine = new DialogAnalyzer();\n        this.previousOptions = [];\n    }\n    setChild(child) {\n        this.editorComponentClass = child\n    }\n\n    setupDraggableBar() {\n        const editorCore = document.querySelector('.RichEditor-root')\n        let movingAllowed = false;\n        const divider = document.querySelector(\".dividerBar\")\n        const saveThis = this;\n        const changeMouseStatus = function (event) {\n            movingAllowed = !movingAllowed;\n            saveThis.editorContent.classList.toggle(\"prohibitSelection\")\n            saveThis.dialogOutputConent.classList.toggle(\"prohibitSelection\")\n        }\n        divider.addEventListener(\"mousedown\", changeMouseStatus, false);\n        divider.addEventListener(\"mouseup\", changeMouseStatus, false);\n        document.addEventListener(\"mousemove\", function (event) {\n            if (movingAllowed) {\n                editorCore.style.width = (event.clientX - 32).toString() + 'px';\n            }\n        }, false);\n    }\n\n    buttonClicked() {\n        for (let i = 0; i < this.previousOptions.length; ++i) {\n            this.previousOptions[i].remove();\n        }\n        this.previousOptions = [];\n        let options = this.dialogEngine.getOptions();\n        if (options === undefined)\n            return\n        for (let i = 0; i < options.length; ++i) {\n            let optionButton = document.createElement(\"button\");\n            optionButton.innerHTML = options[i][0];\n            const remOption = options[i];\n            const saveThis = this;\n            optionButton.addEventListener(\"click\", function () {\n                saveThis.dialogEngine.chooseOption(remOption);\n                saveThis.buttonClicked();\n            })\n            this.previousOptions.push(optionButton);\n            this.dialogOutputConent.appendChild(optionButton);\n        }\n        document.querySelector('.actualDialog').innerHTML = this.dialogEngine.getText();\n    }\n\n    componentDidMount() {\n        this.setupDraggableBar()\n\n        this.dialogOutputConent = document.querySelector(\".dialogSide\");\n        this.editorContent = document.querySelector(\".public-DraftEditor-content\")\n\n        const saveThis = this;\n        document.querySelector('.compileButton').addEventListener(\"click\", () => {\n            saveThis.dialogEngine.compile(this.editorComponentClass.state.editorState.getCurrentContent().getPlainText('\\u0001'));\n            saveThis.buttonClicked();\n        })\n\n    }\n\n    render() {\n        return (\n            <DraftTextEditor parent={this} defaultDialog={this.defaultDialog} />\n        );\n    }\n}\n\n\nexport default MyEditor;","import React, {useEffect} from 'react';\nimport DraftTextEditor from './components/DraftTextEditor'\nimport MyEditor from './components/MyEditor';\n\n\nfunction App() {\n    useEffect(() => {\n        document.title = \"Dialog Editor\"\n    }, []);\n    return (\n        <div className=\"App\" style={{height : '100%'}}>\n            <div style ={{height:'100%'}}>\n                <div className={'flexer'}>\n                    <MyEditor defaultDialog = {sampleDialog}/>\n                    <div className={'dividerBar'}>\n                    </div>\n                    <div className={ 'dialogSide'}>\n                        <div className={'actualDialog'}>\n                        Dialog will be visible here!\n                        </div>\n                    </div>\n                </div>\n\n                <button className={'compileButton'}> Compile!</button>\n            </div>\n        </div>\n\n\n    );\n}\n\nexport default App;\n\n\n\nconst sampleDialog = `\n\\t//What you see now is an example dialog!\n\n(\n\n\\t:\"Good day, sir actor!\"\n\\t\\\\\"Where am I?\"/\n\\t(\n\\t\\t:\"I would say that you are in the theatre. You won't hear more from me.\"\n\\t\\t\\\\\"...\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t\\\\\"Who am I?\"/\n\\t(\n\\t\\t:\"I already said that you, mister actor, are an actor. Why would you want to know more?\"\n\\t\\t\\\\\"...\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t\\\\\"Who are you?\"/\n\\t(\n\\t\\t:\"Wow, that's an interesting question... I'm the owner of this theatre. My name will be a mystery for now.\"\n\\t\\t\\\\\"...\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t\\\\\"Where is the exit here?\"/\n\\t(\n\\t\\t:\"There, first turn left.\"\n\\t\\t\\\\\"Thanks, now I will go\"/\n\\t\\t(\n\\t\\t\\t:exit\n\\t\\t)\n\\t\\t\\\\\"Alright, I'll remember that. You can continue now\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t:save.1.0\n\\t\\\\\"...\"/\n\\t(\n\\t\\t:\"Who do you want to play? I see real talent in you.\"\n\\t\\t:var.\"jobs\".=.0\n\\t\\t:hasTag.\"nonAustro\"\n\\t\\t(\n\\t\\t\\t:var.\"jobs\".+=.1\n\\t\\t)\n\\t\\t:else\n\\t\\t(\n\\t\\t\\\\\"I wouldn't mind being an astronaut\"/\n\\t\\t(\n\\t\\t\\t:\"I'm sorry but that role is already taken.\"\n\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:addTag.\"nonAustro\"\n\\t\\t\\t\\t:up.3\n\\t\\t\\t)\n\\t\\t)\n\\t\\t)\n\\t\\t\n\\t\\t:hasTag.\"nonDragon\"\n\\t\\t(\n\\t\\t\\t:var.\"jobs\".+=.1\n\\t\\t)\n\\t\\t:else\n\\t\\t(\n\\t\\t\\\\\"Fantasy dragon please!\"/\n\\t\\t(\n\\t\\t\\t:\"I'm sorry but that role is already taken.\"\n\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:addTag.\"nonDragon\"\n\\t\\t\\t\\t:up.3\n\\t\\t\\t)\n\\t\\t)\n\\t\\t)\n\\t\\t:hasTag.\"nonDetective\"\n\\t\\t(\n\\t\\t\\t:var.\"jobs\".+=.1\n\\t\\t)\n\\t\\t:else\n\\t\\t(\n\\t\\t\\\\\"I would like to play detective!\"/\n\\t\\t(\n\\t\\t\\t:\"I'm sorry but that role is already taken.\"\n\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:addTag.\"nonDetective\"\n\\t\\t\\t\\t:up.3\n\\t\\t\\t)\n\\t\\t)\n\\t\\t)\n\\t\\t:var.\"jobs\".==.3\n\\t\\t(\n\\t\\t\\t\\\\\"WHO CAN I EVEN PLAY!?\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:\"Hmmm... Let me check...\"\n\\t\\t\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t:\"Yes, I'm very sorry... Apparently, only one role is vacant...\"\n\\t\\t\\t\\t\\t\\t\\\\\"Which one???\"/\n\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t\\t:load.0\n\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t\\t\\\\\"Tell me!\"/\n\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t\\t:load.0\n\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t\\t:save.1.0\n\\t\\t\\t\\t\\t\\t\\\\\"Speak!!!\"/\n\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t\\t:\"Yes... A simple man.\"\n\\t\\t\\t\\t\\t\\t\\t\\t\\\\\"Huh?\"/\n\\t\\t\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t//The game start here...\n\n:\"You wake up in your bed and stare into the rotten ceiling.\"\n\\\\I want to sleep just a little bit more.../\n(\n\\t:\"Unfortunately, you still have to wake up.\"\n\\t\\\\What a shame.../\n\\t(\n\\t\\t:up.2\n\\t)\n)\n\\\\\"What time is it?\"/\n(\n\\t:\" - you ask... You can't really hear an answer though.\"\n\\t\\\\I will tell them.../\n\\t(\n\\t\\t:up.2\n\\t)\n)\n\\\\Time to rise from the bed.../\n(\n\\t:exit\n)\n\\t\\t\\t//The game ends here...\n\\t\\t\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t)\n\\t\\t\\t)\n\\t\\t)\n\\t)\n)`\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'draft-js/dist/Draft.css';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n        <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}