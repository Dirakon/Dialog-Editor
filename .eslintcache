[{"/home/dirakon/jsProjects/dialogEditor/src/index.js":"1","/home/dirakon/jsProjects/dialogEditor/src/App.js":"2","/home/dirakon/jsProjects/dialogEditor/src/reportWebVitals.js":"3","/home/dirakon/jsProjects/dialogEditor/src/components/draftTextEditor.js":"4","/home/dirakon/jsProjects/dialogEditor/src/DialogAnalyzer.js":"5"},{"size":1145,"mtime":1634135777159,"results":"6","hashOfConfig":"7"},{"size":838,"mtime":1634138630004,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1634135777159,"results":"9","hashOfConfig":"7"},{"size":10600,"mtime":1634138935345,"results":"10","hashOfConfig":"7"},{"size":11034,"mtime":1634144130715,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1wbcdls",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/dirakon/jsProjects/dialogEditor/src/index.js",["25"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Editor, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport BrowserRouter from 'react-router-dom/BrowserRouter'\nclass MyEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {editorState: EditorState.createEmpty()};\n        this.onChange = editorState => this.setState({editorState});\n    }\n\n\n    render() {\n        return (\n            <Editor editorState={this.state.editorState} onChange={this.onChange} />\n        );\n    }\n}\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL} >\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n//ReactDOM.render(<React.StrictMode><MyEditor /></React.StrictMode>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["26","27"],"/home/dirakon/jsProjects/dialogEditor/src/App.js",[],"/home/dirakon/jsProjects/dialogEditor/src/reportWebVitals.js",[],"/home/dirakon/jsProjects/dialogEditor/src/components/draftTextEditor.js",["28"],"import React, { useEffect } from 'react';\nimport { Editor, EditorState, getDefaultKeyBinding, RichUtils } from 'draft-js';\nimport './RichText.css'\nimport DialogAnalyzer from '../DialogAnalyzer'\nconst stateFromHTML = require('draft-js-import-html').stateFromHTML;\n\n\nclass DraftTextEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { editorState: EditorState.createWithText(sampleDialog) };\n\n        this.focus = () => this.refs.editor.focus();\n        this.onChange = (editorState) => this.setState({ editorState });\n\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n        this.toggleBlockType = this._toggleBlockType.bind(this);\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n    }\n\n    getInitialState() {\n        let contentState = stateFromHTML('<p>Hello</p>');\n        return {\n            editorState: EditorState.createWithContent(contentState)\n        };\n    }\n    setupDraggableBar() {\n        const editorCore = document.querySelector('.RichEditor-root')\n        let movingAllowed = false;\n        const divider = document.querySelector(\".DIVIDER\")\n        divider.addEventListener(\"mousedown\", function (event) {\n            movingAllowed = true;\n        }, false);\n        divider.addEventListener(\"mouseup\", function (event) {\n            movingAllowed = false;\n        }, false);\n        document.addEventListener(\"mousemove\", function (event) {\n            if (movingAllowed) {\n                editorCore.style.width = (event.clientX - 32).toString() + 'px';\n            }\n        }, false);\n    }\n    componentDidMount() {\n        this.setupDraggableBar()\n\n        const button = document.querySelector('.compiler');\n        let theDraftTextEditor = this;\n        const dialoger = new DialogAnalyzer();\n        let previousOptions = [];\n        const updateIt = function () {\n            for (let i = 0; i < previousOptions.length; ++i) {\n                previousOptions[i].remove();\n            }\n            previousOptions = [];\n            let options = dialoger.getOptions();\n            if (options === undefined)\n                return\n            let papa = document.getElementsByClassName(\"dialogSide\")[0]\n            for (let i = 0; i < options.length; ++i) {\n                let element = document.createElement(\"button\");\n                element.innerHTML = options[i][0];\n                const remOption = options[i];\n                element.addEventListener(\"click\", function () {\n                    dialoger.chooseOption(remOption);\n                    updateIt();\n                })\n                previousOptions.push(element);\n                papa.appendChild(element);\n            }\n            document.querySelector('.actualDialog').innerHTML = dialoger.getText();\n        }\n        button.addEventListener(\"click\", function () {\n            dialoger.compile(theDraftTextEditor.state.editorState.getCurrentContent().getPlainText('\\u0001'))\n            updateIt();\n        });\n\n    }\n\n    _handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return true;\n        }\n        return false;\n    }\n\n    _mapKeyToEditorCommand(e) {\n        if (e.keyCode === 9 /* TAB */) {\n            const newEditorState = RichUtils.onTab(\n                e,\n                this.state.editorState,\n                4, /* maxDepth */\n            );\n            if (newEditorState !== this.state.editorState) {\n                this.onChange(newEditorState);\n            }\n            return;\n        }\n        return getDefaultKeyBinding(e);\n    }\n\n    _toggleBlockType(blockType) {\n        this.onChange(\n            RichUtils.toggleBlockType(\n                this.state.editorState,\n                blockType\n            )\n        );\n    }\n\n    _toggleInlineStyle(inlineStyle) {\n        this.onChange(\n            RichUtils.toggleInlineStyle(\n                this.state.editorState,\n                inlineStyle\n            )\n        );\n    }\n\n    render() {\n        const { editorState } = this.state;\n\n        // If the user changes block type before entering any text, we can\n        // either style the placeholder or hide it. Let's just hide it now.\n        let className = 'RichEditor-editor';\n        var contentState = editorState.getCurrentContent();\n        if (!contentState.hasText()) {\n            if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n                className += ' RichEditor-hidePlaceholder';\n            }\n        }\n\n        return (\n            <div className=\"RichEditor-root\">\n                <BlockStyleControls\n                    editorState={editorState}\n                    onToggle={this.toggleBlockType}\n                />\n                <InlineStyleControls\n                    editorState={editorState}\n                    onToggle={this.toggleInlineStyle}\n                />\n                <div className={className} onClick={this.focus}>\n                    <Editor\n                        blockStyleFn={getBlockStyle}\n                        customStyleMap={styleMap}\n                        editorState={editorState}\n                        handleKeyCommand={this.handleKeyCommand}\n                        keyBindingFn={this.mapKeyToEditorCommand}\n                        onChange={this.onChange}\n                        placeholder=\"Tell a story...\"\n                        ref=\"editor\"\n                        spellCheck={true}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n    CODE: {\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n        fontSize: 16,\n        padding: 2,\n    },\n};\n\nfunction getBlockStyle(block) {\n    switch (block.getType()) {\n        case 'blockquote':\n            return 'RichEditor-blockquote';\n        default:\n            return null;\n    }\n}\n\nclass StyleButton extends React.Component {\n    constructor() {\n        super();\n        this.onToggle = (e) => {\n            e.preventDefault();\n            this.props.onToggle(this.props.style);\n        };\n    }\n\n    render() {\n        let className = 'RichEditor-styleButton';\n        if (this.props.active) {\n            className += ' RichEditor-activeButton';\n        }\n\n        return (\n            <span className={className} onMouseDown={this.onToggle}>\n                {this.props.label}\n            </span>\n        );\n    }\n}\n\nconst BLOCK_TYPES = [\n];\n\nconst BlockStyleControls = (props) => {\n    const { editorState } = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType();\n\n    return (\n        <div className=\"RichEditor-controls\">\n            {BLOCK_TYPES.map((type) =>\n                <StyleButton\n                    key={type.label}\n                    active={type.style === blockType}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nvar INLINE_STYLES = [\n];\n\nconst InlineStyleControls = (props) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle();\n\n    return (\n        <div className=\"RichEditor-controls\">\n            {INLINE_STYLES.map((type) =>\n                <StyleButton\n                    key={type.label}\n                    active={currentStyle.has(type.style)}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\nconst sampleDialog = `\n\\t//What you see now is an example dialog!\n\n(\n\n\\t:\"Good day, sir actor!\"\n\\t\\\\\"Where am I?\"/\n\\t(\n\\t\\t:\"I would say that you are in the theatre. You won't hear more from me.\"\n\\t\\t\\\\\"...\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t\\\\\"Who am I?\"/\n\\t(\n\\t\\t:\"I already said that you, mister actor, are an actor. Why would you want to know more?\"\n\\t\\t\\\\\"...\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t\\\\\"Who are you?\"/\n\\t(\n\\t\\t:\"Wow, that's an interesting question... I'm the owner of this theatre. My name will be a mystery for now.\"\n\\t\\t\\\\\"...\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t\\\\\"Where is the exit here?\"/\n\\t(\n\\t\\t:\"There, first turn left.\"\n\\t\\t\\\\\"Thanks, now I will go\"/\n\\t\\t(\n\\t\\t\\t:exit\n\\t\\t)\n\\t\\t\\\\\"Alright, I'll remember that. You can continue now\"/\n\\t\\t(\n\\t\\t\\t:load.0\n\\t\\t)\n\\t)\n\\t:save.1.0\n\\t\\\\\"...\"/\n\\t(\n\\t\\t:\"Who do you want to play? I see real talent in you.\"\n\\t\\t:var.\"jobs\".=.0\n\\t\\t:hasTag.\"nonAustro\"\n\\t\\t(\n\\t\\t\\t:var.\"jobs\".+=.1\n\\t\\t)\n\\t\\t:else\n\\t\\t(\n\\t\\t\\\\\"I wouldn't mind being an astronaut\"/\n\\t\\t(\n\\t\\t\\t:\"I'm sorry but that role is already taken.\"\n\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:addTag.\"nonAustro\"\n\\t\\t\\t\\t:up.3\n\\t\\t\\t)\n\\t\\t)\n\\t\\t)\n\\t\\t\n\\t\\t:hasTag.\"nonDragon\"\n\\t\\t(\n\\t\\t\\t:var.\"jobs\".+=.1\n\\t\\t)\n\\t\\t:else\n\\t\\t(\n\\t\\t\\\\\"Fantasy dragon please!\"/\n\\t\\t(\n\\t\\t\\t:\"I'm sorry but that role is already taken.\"\n\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:addTag.\"nonDragon\"\n\\t\\t\\t\\t:up.3\n\\t\\t\\t)\n\\t\\t)\n\\t\\t)\n\\t\\t:hasTag.\"nonDetective\"\n\\t\\t(\n\\t\\t\\t:var.\"jobs\".+=.1\n\\t\\t)\n\\t\\t:else\n\\t\\t(\n\\t\\t\\\\\"I would like to play detective!\"/\n\\t\\t(\n\\t\\t\\t:\"I'm sorry but that role is already taken.\"\n\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:addTag.\"nonDetective\"\n\\t\\t\\t\\t:up.3\n\\t\\t\\t)\n\\t\\t)\n\\t\\t)\n\\t\\t:var.\"jobs\".==.3\n\\t\\t(\n\\t\\t\\t\\\\\"WHO CAN I EVEN PLAY!?\"/\n\\t\\t\\t(\n\\t\\t\\t\\t:\"Hmmm... Let me check...\"\n\\t\\t\\t\\t\\t\\\\\"...\"/\n\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t:\"Yes, I'm very sorry... Apparently, only one role is vacant...\"\n\\t\\t\\t\\t\\t\\t\\\\\"Which one???\"/\n\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t\\t:load.0\n\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t\\t\\\\\"Tell me!\"/\n\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t\\t:load.0\n\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t\\t:save.1.0\n\\t\\t\\t\\t\\t\\t\\\\\"Speak!!!\"/\n\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t\\t\\t\\t\\t:\"Yes... A simple man.\"\n\\t\\t\\t\\t\\t\\t\\t\\t\\\\\"Huh?\"/\n\\t\\t\\t\\t\\t\\t\\t\\t(\n\\t\\t\\t//The game start here...\n\n:\"You wake up in your bed and stare into the rotten ceiling.\"\n\\\\I want to sleep just a little bit more.../\n(\n\\t:\"Unfortunately, you still have to wake up.\"\n\\t\\\\What a shame.../\n\\t(\n\\t\\t:up.2\n\\t)\n)\n\\\\\"What time is it?\"/\n(\n\\t:\" - you ask... You can't really hear an answer though.\"\n\\t\\\\I will tell them.../\n\\t(\n\\t\\t:up.2\n\\t)\n)\n\\\\Time to rise from the bed.../\n(\n\\t:exit\n)\n\\t\\t\\t//The game ends here...\n\\t\\t\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t\\t)\n\\t\\t\\t\\t\\t)\n\\t\\t\\t)\n\\t\\t)\n\\t)\n)`\nexport default DraftTextEditor;\n","/home/dirakon/jsProjects/dialogEditor/src/DialogAnalyzer.js",["29","30","31","32"],{"ruleId":"33","severity":1,"message":"34","line":9,"column":7,"nodeType":"35","messageId":"36","endLine":9,"endColumn":15},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"33","severity":1,"message":"41","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":44,"column":9,"nodeType":"44","messageId":"45","endLine":165,"endColumn":10},{"ruleId":"46","severity":1,"message":"47","line":111,"column":29,"nodeType":"48","messageId":"49","endLine":116,"endColumn":14},{"ruleId":"46","severity":1,"message":"47","line":118,"column":29,"nodeType":"48","messageId":"49","endLine":122,"endColumn":14},{"ruleId":"50","severity":1,"message":"51","line":222,"column":50,"nodeType":"52","messageId":"53","endLine":222,"endColumn":52},"no-unused-vars","'MyEditor' is defined but never used.","Identifier","unusedVar","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"'useEffect' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]